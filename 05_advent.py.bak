import numpy as np

def create_grid(filename):
    item_dict = {} # create dictionary to return
    item_dict["data"] = np.delete((np.loadtxt(filename, dtype=str, delimiter= " ")),1 ,1) # strip extra characters from input
    print(item_dict)
    largest = (0,0)
    for i,j in item_dict["data"]: # find dimensions of grid
        print("**********", tuple(i), tuple(j), "************")
        largest = ( max([largest[0], int(i[0]), int(j[0])])
, max([largest[0] , int(i[2]), int(j[2])])
)
    item_dict["map"] = np.zeros((largest[0]+1, largest[1]+1))
    return item_dict

def edit_map(dictionary):
    print(dictionary["data"])
    counter = 0
    counter_array = []
    for i,j in dictionary["data"]:
        if i[0] == j[0] or i[2] == j[2]:
            counter_array.append(counter)
            counter += 1
        else:
            counter += 1
    
    for i in counter_array:
        first_tuple = (dictionary["data"][i][0])
        second_tuple = (dictionary["data"][i][1]) 
        print(first_tuple, second_tuple)
        if first_tuple[0] == second_tuple[0]:
            top = max(int(first_tuple[2]), int(second_tuple[2]))
            bottom = min(int(first_tuple[2]), int(second_tuple[2]))
            for x in range(bottom, top+1):
                dictionary["map"][x, int(first_tuple[0])] += 1
        elif first_tuple[2] == second_tuple[2]:
            top = max(int(first_tuple[0]), int(second_tuple[0]))
            bottom = min(int(first_tuple[0]), int(second_tuple[0]))
            for z in range(bottom, top+1):
                dictionary["map"][int(first_tuple[2]), z] += 1
    print(dictionary["map"])
        

    #print(dictionary["data"], "\n\n\n\n", counter_array)


if __name__ == "__main__":
    print(create_grid("5input.txt"))
    #edit_map(create_grid("example.txt"))

